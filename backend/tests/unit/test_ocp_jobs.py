from datetime import date, datetime
import json
from unittest.mock import AsyncMock

from fastapi.testclient import TestClient
import pandas as pd
import pytest

from app.main import app as fastapi_app

"""Unit tests for the OCP jobs endpoint.

Assisted-by: Cursor.

This file was generated by Cursor using the following prompt:

    write unit tests for ocpJobs.py

I had to manually fix a few mocks, but this worked almost out of the box and
gave 100% code coverage.
"""


@pytest.fixture
def client():
    """Create a FastAPI test client."""
    yield TestClient(fastapi_app)


@pytest.fixture
def mock_elastic_service():
    """Mock ElasticService."""
    mock_es = AsyncMock()
    mock_es.post = AsyncMock()
    mock_es.close = AsyncMock()
    return mock_es


@pytest.fixture
def sample_jobs_data():
    """Sample jobs data for testing."""
    return pd.DataFrame(
        [
            {
                "uuid": "550e8400-e29b-41d4-a716-446655440000",
                "testName": "cluster-density-ms",
                "jobStatus": "success",
                "startDate": "2023-01-01",
                "endDate": "2023-01-02",
                "benchmark": "cluster-density-ms",
                "platform": "AWS",
                "workerNodesCount": 24,
                "ocpVersion": "4.14.0",
            },
            {
                "uuid": "550e8400-e29b-41d4-a716-446655440001",
                "testName": "cluster-density-ms",
                "jobStatus": "failure",
                "startDate": "2023-01-01",
                "endDate": "2023-01-02",
                "benchmark": "cluster-density-ms",
                "platform": "AWS",
                "workerNodesCount": 24,
                "ocpVersion": "4.14.0",
            },
        ]
    )


@pytest.fixture
def sample_filter_data():
    """Sample filter data for testing."""
    return {
        "filterData": [
            {"key": "benchmark", "value": ["cluster-density-ms", "node-density"]},
            {"key": "platform", "value": ["AWS", "GCP"]},
            {"key": "jobStatus", "value": ["success", "failure"]},
        ],
        "total": 100,
    }


@pytest.fixture
def mock_datetime(monkeypatch):
    """Mock datetime for default date calculation."""
    fixed_date = datetime(2023, 1, 15, 10, 0, 0)

    class MockDatetime(datetime):
        @classmethod
        def utcnow(cls):
            return fixed_date

        def date(self):
            return fixed_date.date()

    monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.datetime", MockDatetime)


class TestJobsEndpoint:
    """Test the /api/v1/ocp/jobs endpoint."""

    @pytest.mark.asyncio
    async def test_jobs_success_default_dates(self, client, monkeypatch):
        """Test successful jobs endpoint call with default dates."""

        # Mock getData function
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(
                    [
                        {
                            "uuid": "test-uuid",
                            "testName": "test",
                            "jobStatus": "SUCCESS",
                            "startDate": "2023-01-10",
                            "endDate": "2023-01-15",
                        }
                    ]
                ),
                "total": 1,
            }
        )

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.getData", mock_get_data)

        response = client.get("/api/v1/ocp/jobs")

        assert response.status_code == 200
        # OCP endpoints return double-encoded JSON
        data = json.loads(response.json())
        assert "startDate" in data
        assert "endDate" in data
        assert "results" in data
        assert "total" in data
        assert "offset" in data
        assert data["total"] == 1
        assert len(data["results"]) == 1

    @pytest.mark.asyncio
    async def test_jobs_with_specific_dates(self, client, monkeypatch):
        """Test jobs endpoint with specific dates."""
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(
                    [
                        {
                            "uuid": "test-uuid",
                            "testName": "test",
                            "jobStatus": "SUCCESS",
                            "startDate": "2023-01-01",
                            "endDate": "2023-01-15",
                        }
                    ]
                ),
                "total": 1,
            }
        )

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.getData", mock_get_data)

        response = client.get(
            "/api/v1/ocp/jobs?start_date=2023-01-01&end_date=2023-01-15"
        )

        assert response.status_code == 200
        data = json.loads(response.json())
        assert data["startDate"] == "2023-01-01"
        assert data["endDate"] == "2023-01-15"

    def test_jobs_invalid_date_range(self, client):
        """Test jobs endpoint with invalid date range."""
        response = client.get(
            "/api/v1/ocp/jobs?start_date=2023-01-15&end_date=2023-01-01"
        )

        assert response.status_code == 422
        data = response.json()
        assert "start_date must be less than end_date" in data["error"]

    @pytest.mark.asyncio
    async def test_jobs_with_pagination(self, client, monkeypatch):
        """Test jobs endpoint with pagination parameters."""
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(
                    [
                        {
                            "uuid": "test-uuid",
                            "testName": "test",
                            "jobStatus": "SUCCESS",
                        }
                    ]
                ),
                "total": 1,
            }
        )

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.getData", mock_get_data)

        response = client.get("/api/v1/ocp/jobs?size=10&offset=5")

        assert response.status_code == 200
        data = json.loads(response.json())
        assert data["offset"] == 15  # offset + size

    @pytest.mark.asyncio
    async def test_jobs_with_filter(self, client, monkeypatch):
        """Test jobs endpoint with filter parameter."""
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(
                    [
                        {
                            "uuid": "test-uuid",
                            "testName": "test",
                            "jobStatus": "SUCCESS",
                            "benchmark": "cluster-density-ms",
                        }
                    ]
                ),
                "total": 1,
            }
        )

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.getData", mock_get_data)

        response = client.get("/api/v1/ocp/jobs?filter=benchmark:cluster-density-ms")

        assert response.status_code == 200
        data = json.loads(response.json())
        assert data["total"] == 1

    @pytest.mark.asyncio
    async def test_jobs_with_sort(self, client, monkeypatch):
        """Test jobs endpoint with sort parameter."""
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(
                    [
                        {
                            "uuid": "test-uuid-1",
                            "testName": "test1",
                            "jobStatus": "SUCCESS",
                        },
                        {
                            "uuid": "test-uuid-2",
                            "testName": "test2",
                            "jobStatus": "FAILURE",
                        },
                    ]
                ),
                "total": 2,
            }
        )

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.getData", mock_get_data)

        response = client.get("/api/v1/ocp/jobs?sort=testName:asc")

        assert response.status_code == 200
        data = json.loads(response.json())
        assert data["total"] == 2
        assert len(data["results"]) == 2

    @pytest.mark.asyncio
    async def test_jobs_pretty_format(self, client, monkeypatch, mock_datetime):
        """Test jobs endpoint with pretty format."""
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(
                    [
                        {
                            "uuid": "test-uuid",
                            "testName": "test",
                            "jobStatus": "SUCCESS",
                        }
                    ]
                ),
                "total": 1,
            }
        )

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.getData", mock_get_data)

        response = client.get("/api/v1/ocp/jobs?pretty=true")

        assert response.status_code == 200
        assert response.headers["content-type"] == "application/json"
        # Should return pretty-formatted JSON
        data = response.json()
        assert data == {
            "startDate": "2023-01-10",
            "endDate": "2023-01-15",
            "results": [
                {"uuid": "test-uuid", "testName": "test", "jobStatus": "SUCCESS"}
            ],
            "total": 1,
            "offset": 10000,
        }

    @pytest.mark.asyncio
    async def test_jobs_empty_results(self, client, monkeypatch):
        """Test jobs endpoint when no data is returned."""
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(),
                "total": 0,
            }
        )

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.getData", mock_get_data)

        response = client.get("/api/v1/ocp/jobs")

        assert response.status_code == 200
        data = json.loads(response.json())
        assert data["total"] == 0
        assert len(data["results"]) == 0


class TestFiltersEndpoint:
    """Test the /api/v1/ocp/filters endpoint."""

    @pytest.mark.asyncio
    async def test_filters_success(self, client, monkeypatch):
        """Test successful filters endpoint call."""
        # Mock datetime for default date calculation
        fixed_date = datetime(2023, 1, 15, 10, 0, 0)

        class MockDatetime(datetime):
            @classmethod
            def utcnow(cls):
                return fixed_date

            def date(self):
                return fixed_date.date()

        monkeypatch.setattr("app.api.v1.endpoints.ocp.ocpJobs.datetime", MockDatetime)

        # Mock getFilterData function
        mock_get_filter_data = AsyncMock(
            return_value={
                "filterData": [
                    {
                        "key": "benchmark",
                        "value": ["cluster-density-ms", "node-density"],
                    },
                    {"key": "platform", "value": ["AWS", "GCP"]},
                ],
                "total": 100,
            }
        )

        monkeypatch.setattr(
            "app.api.v1.endpoints.ocp.ocpJobs.getFilterData", mock_get_filter_data
        )

        response = client.get("/api/v1/ocp/filters")

        assert response.status_code == 200
        assert response.headers["content-type"] == "application/json"
        data = response.json()
        assert data == {
            "filterData": [
                {"key": "benchmark", "value": ["cluster-density-ms", "node-density"]},
                {"key": "platform", "value": ["AWS", "GCP"]},
            ],
            "total": 100,
        }

    @pytest.mark.asyncio
    async def test_filters_with_dates(self, client, monkeypatch):
        """Test filters endpoint with specific dates."""
        mock_get_filter_data = AsyncMock(
            return_value={
                "filterData": [
                    {"key": "benchmark", "value": ["cluster-density-ms"]},
                ],
                "total": 50,
            }
        )

        monkeypatch.setattr(
            "app.api.v1.endpoints.ocp.ocpJobs.getFilterData", mock_get_filter_data
        )

        response = client.get(
            "/api/v1/ocp/filters?start_date=2023-01-01&end_date=2023-01-15"
        )

        assert response.status_code == 200
        data = response.json()
        assert data == {
            "filterData": [{"key": "benchmark", "value": ["cluster-density-ms"]}],
            "total": 50,
        }

    def test_filters_invalid_date_range(self, client):
        """Test filters endpoint with invalid date range."""
        response = client.get(
            "/api/v1/ocp/filters?start_date=2023-01-15&end_date=2023-01-01"
        )

        assert response.status_code == 422
        data = response.json()
        assert "start_date must be less than end_date" in data["error"]

    @pytest.mark.asyncio
    async def test_filters_with_filter_param(self, client, monkeypatch):
        """Test filters endpoint with filter parameter."""
        mock_get_filter_data = AsyncMock(
            return_value={
                "filterData": [
                    {"key": "benchmark", "value": ["cluster-density-ms"]},
                ],
                "total": 25,
            }
        )

        monkeypatch.setattr(
            "app.api.v1.endpoints.ocp.ocpJobs.getFilterData", mock_get_filter_data
        )

        response = client.get("/api/v1/ocp/filters?filter=benchmark:cluster-density-ms")

        assert response.status_code == 200
        data = response.json()
        assert data == {
            "filterData": [{"key": "benchmark", "value": ["cluster-density-ms"]}],
            "total": 25,
        }

    @pytest.mark.asyncio
    async def test_filters_pretty_format(self, client, monkeypatch):
        """Test filters endpoint with pretty format."""
        mock_get_filter_data = AsyncMock(
            return_value={
                "filterData": [
                    {"key": "benchmark", "value": ["cluster-density-ms"]},
                ],
                "total": 25,
            }
        )

        monkeypatch.setattr(
            "app.api.v1.endpoints.ocp.ocpJobs.getFilterData", mock_get_filter_data
        )

        response = client.get("/api/v1/ocp/filters?pretty=true")

        assert response.status_code == 200
        assert response.headers["content-type"] == "application/json"
        data = response.json()
        assert data == {
            "filterData": [{"key": "benchmark", "value": ["cluster-density-ms"]}],
            "total": 25,
        }

    @pytest.mark.asyncio
    async def test_filters_empty_results(self, client, monkeypatch):
        """Test filters endpoint when no filter data is returned."""
        mock_get_filter_data = AsyncMock(
            return_value={
                "filterData": [],
                "total": 0,
            }
        )

        monkeypatch.setattr(
            "app.api.v1.endpoints.ocp.ocpJobs.getFilterData", mock_get_filter_data
        )

        response = client.get("/api/v1/ocp/filters")

        assert response.status_code == 200
        data = response.json()
        assert data == {"filterData": [], "total": 0}


class TestHelperFunctions:
    """Test helper functions and edge cases."""

    def test_normalize_pagination_import(self):
        """Test that normalize_pagination is properly imported."""
        from app.api.v1.commons.utils import normalize_pagination

        # Test normal case
        offset, size = normalize_pagination(0, 10)
        assert offset == 0
        assert size == 10

        # Test default case
        offset, size = normalize_pagination(None, None)
        assert offset == 0
        assert size > 0  # Should get some default size

    @pytest.mark.asyncio
    async def test_get_data_function_call(self, monkeypatch):
        """Test that getData function is called with correct parameters."""
        mock_get_data = AsyncMock(
            return_value={
                "data": pd.DataFrame(),
                "total": 0,
            }
        )

        monkeypatch.setattr("app.api.v1.commons.ocp.getData", mock_get_data)

        # Import the function to test direct call
        from app.api.v1.commons.ocp import getData

        start_date = date(2023, 1, 1)
        end_date = date(2023, 1, 15)

        await getData(start_date, end_date, 10, 0, None, None, "ocp.elasticsearch")

        mock_get_data.assert_called_once_with(
            start_date, end_date, 10, 0, None, None, "ocp.elasticsearch"
        )

    @pytest.mark.asyncio
    async def test_get_filter_data_function_call(self, monkeypatch):
        """Test that getFilterData function is called with correct parameters."""
        mock_get_filter_data = AsyncMock(
            return_value={
                "filterData": [],
                "total": 0,
            }
        )

        monkeypatch.setattr(
            "app.api.v1.commons.ocp.getFilterData", mock_get_filter_data
        )

        # Import the function to test direct call
        from app.api.v1.commons.ocp import getFilterData

        start_date = date(2023, 1, 1)
        end_date = date(2023, 1, 15)

        await getFilterData(start_date, end_date, None, "ocp.elasticsearch")

        mock_get_filter_data.assert_called_once_with(
            start_date, end_date, None, "ocp.elasticsearch"
        )

    def test_date_validation_logic(self):
        """Test date validation edge cases."""
        # Test same dates (should be valid)
        start_date = date(2023, 1, 15)
        end_date = date(2023, 1, 15)
        assert start_date <= end_date

        # Test invalid range
        start_date = date(2023, 1, 16)
        end_date = date(2023, 1, 15)
        assert start_date > end_date

    def test_response_structure(self):
        """Test the expected response structure."""
        # Test jobs response structure
        response = {
            "startDate": "2023-01-01",
            "endDate": "2023-01-15",
            "results": [],
            "total": 0,
            "offset": 10,
        }

        required_keys = {"startDate", "endDate", "results", "total", "offset"}
        assert set(response.keys()) == required_keys

    @pytest.mark.asyncio
    async def test_dataframe_to_dict_conversion(self):
        """Test DataFrame to dict conversion logic."""
        # Create sample DataFrame
        df = pd.DataFrame(
            [
                {"uuid": "test1", "name": "job1"},
                {"uuid": "test2", "name": "job2"},
            ]
        )

        # Test conversion to records
        records = df.to_dict("records")
        assert len(records) == 2
        assert records[0]["uuid"] == "test1"
        assert records[1]["uuid"] == "test2"

    def test_json_response_serialization(self):
        """Test JSON response serialization."""
        response_data = {
            "startDate": "2023-01-01",
            "endDate": "2023-01-15",
            "results": [{"uuid": "test", "name": "job"}],
            "total": 1,
            "offset": 10,
        }

        # Test JSON serialization
        json_string = json.dumps(response_data)
        assert isinstance(json_string, str)

        # Test deserialization
        parsed_data = json.loads(json_string)
        assert parsed_data == response_data

    def test_pretty_json_formatting(self):
        """Test pretty JSON formatting."""
        response_data = {
            "startDate": "2023-01-01",
            "endDate": "2023-01-15",
            "results": [],
            "total": 0,
        }

        # Test pretty formatting
        pretty_json = json.dumps(response_data, indent=4)
        assert isinstance(pretty_json, str)
        assert "\n" in pretty_json  # Should have newlines for pretty format
        assert "    " in pretty_json  # Should have indentation
