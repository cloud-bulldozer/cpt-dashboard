# docker compose file to deploy a test environment
#
# Not currently used: limitations in the podman compose engine mean we need to
# rely on podman's preference for the docker compose engine, and I'd like to
# avoid dependency on docker.
#
# This was however a good experiment and I'd like to build on this at some
# point.

x-backend: &backend_base
  container_name: backend
  build:
    context: ./backend
    dockerfile: backend.containerfile
  image: backend:latest
  environment:
    - CORS_ALLOWED_ORIGINS=http://localhost:3000,localhost:3000,http://frontend:3000,frontend:3000

x-frontend: &frontend_base
  container_name: frontend
  build:
    context: ./frontend
    dockerfile: frontend.containerfile
  image: frontend:latest

networks:
  e2e-pod:
    driver: bridge

services:
  searchdb-ocp:
    container_name: searchdb-ocp
    image: docker.io/opensearchproject/opensearch:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s' > /dev/null"]
      interval: 10s
      retries: 5
      start_period: 15s
    networks:
       - e2e-pod
    ports:
      - "9200"
    volumes:
      - ./testing/opensearch.yml:/usr/share/opensearch/config/opensearch.yml:z
      - ./testing/ocp/snapshot.tar.gz:/var/tmp/snapshot.tar.gz:z
    environment:
      - discovery.type=single-node
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
    entrypoint:
      - /bin/bash
      - -c
      - |
        # unpack the tar before starting Opensearch
        cd /var/tmp
        tar xfz snapshot.tar.gz
        # now exec the upstream entrypoint so ES boots normally
        exec /usr/share/opensearch/opensearch-docker-entrypoint.sh

  searchdb-ilab:
    container_name: searchdb-ilab
    image: docker.io/opensearchproject/opensearch:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s' > /dev/null"]
      interval: 10s
      retries: 5
      start_period: 15s
    networks:
       - e2e-pod
    ports:
      - "9200"
    volumes:
      - ./testing/opensearch.yml:/usr/share/opensearch/config/opensearch.yml:z
      - ./testing/ilab/snapshot.tar.gz:/var/tmp/snapshot.tar.gz:z
    environment:
      - discovery.type=single-node
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
    entrypoint:
      - /bin/bash
      - -c
      - |
        # unpack the tar before starting Opensearch
        cd /var/tmp
        tar xfz snapshot.tar.gz
        # now exec the upstream entrypoint so ES boots normally
        exec /usr/share/opensearch/opensearch-docker-entrypoint.sh

  db-seed:
    container_name: db-seed
    image: functional:latest
    build:
      context: .
      dockerfile: testing/functional.containerfile
    depends_on:
      searchdb-ocp:
        condition: service_healthy
    networks: [e2e-pod]
    entrypoint: ["/backend/db_seed.py"]
    restart: "no"

  backend:
    <<: *backend_base
    depends_on:
      - searchdb-ocp
    volumes:
      - ./testing/ocpperf_test.toml:/opt/backend/ocpperf.toml:Z
    networks:
      e2e-pod:
        aliases: [backend]
    ports:
      - "127.0.0.1:8000:8000"

  backend-host:
    <<: *backend_base
    profiles: [host]
    volumes:
      - ./backend/ocpperf.toml:/opt/backend/ocpperf.toml:Z
    network_mode: host
    ports:
      - "8000:8000"

  frontend:
    <<: *frontend_base
    build:
      context: ./frontend
      dockerfile: frontend.containerfile
      args:
        VITE_PERF_DATA_API_BASE_URL: http://backend:8000
    networks:
      e2e-pod:
        aliases: [frontend]
    ports:
      - "127.0.0.1:3000:3000"

  frontend-host:
    <<: *frontend_base
    profiles: [host]
    entrypoint: ["nginx", "-g", "daemon off;"]
    extra_hosts:
      - "backend:127.0.0.1"
    network_mode: host
    ports:
      - "3000:3000"

  e2e-frontend:
    container_name: e2e-frontend
    profiles: [e2e]
    build:
      context: ./frontend
      dockerfile: e2e_frontend.containerfile
      tags: [e2e-frontend:latest]
    image: e2e-frontend:latest
    network_mode: host
    entrypoint: ["npx", "cypress", "run", "--e2e", "--headless"]
    depends_on:
      frontend:
        condition: service_started
      db-seed:
        condition: service_completed_successfully
    command: ["run", "cypress:run:e2e"]
