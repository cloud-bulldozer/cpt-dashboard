networks:
  e2e-pod:
    driver: bridge

services:
  searchdb-ocp:
    container_name: searchdb-ocp
    image: docker.io/opensearchproject/opensearch:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s' > /dev/null"]
      interval: 10s
      retries: 5
      start_period: 15s    
    networks:
       - e2e-pod
    ports:
      - "9200"
    volumes:
      - ./backend/tests/functional/setup/ocp_opensearch.yml:/usr/share/opensearch/config/opensearch.yml:z
      - ./backend/tests/fixtures/search_db_snapshots/ocp-snapshot.tar.gz:/var/tmp/snapshot.tar.gz:z
    environment:
      - discovery.type=single-node
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
    entrypoint:
      - /bin/bash
      - -c
      - |
        # unpack the tar before starting Opensearch
        cd /var/tmp
        tar xfz snapshot.tar.gz
        # now exec the upstream entrypoint so ES boots normally
        exec /usr/share/opensearch/opensearch-docker-entrypoint.sh      

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: backend.containerfile
    image: backend:latest
    depends_on:
      - searchdb-ocp
    networks:
      e2e-pod:
        aliases:
          - backend
    volumes:
      - ./backend/tests/ocpperf_test.toml:/opt/backend/ocpperf.toml:Z
    environment:
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,localhost:3000,http://frontend:3000,frontend:3000
    ports:
      - "127.0.0.1:8000:8000"      

  db-seed:
    container_name: db-seed  
    image: functional:latest    
    build:
      context: ./backend
      dockerfile: tests/functional.containerfile
    depends_on:
      searchdb-ocp:
        condition: service_healthy
    networks:
      - e2e-pod
    entrypoint: ["python3", "-u", "tests/db_seed.py"]
    restart: "no"

  frontend:
    container_name: frontend
    image: frontend:latest    
    build: 
      context: ./frontend
      dockerfile: frontend.containerfile
      args:
        VITE_PERF_DATA_API_BASE_URL: http://backend:8000
    networks:
      e2e-pod:
        aliases:
          - frontend
    ports:
      - "127.0.0.1:3000:3000"

  e2e-frontend:
    container_name: e2e-frontend
    profiles:
      - e2e
    image: e2e-frontend:latest      
    build:
      context: ./frontend
      dockerfile: e2e_frontend.containerfile
      tags:
        - e2e-frontend:latest
    network_mode: host
    # avoid Xvfb collisions on your local machine b/c the
    # cypress base image in e2e_frontend wraps its entrypoint 
    # in an xvfb-run call
    entrypoint: ["npx", "cypress", "run", "--e2e", "--headless"]
    depends_on:
      frontend:
        condition: service_started    
      db-seed:
        condition: service_completed_successfully
    command: ["run", "cypress:run:e2e"]
